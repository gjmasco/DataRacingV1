@using DataRacingV1.Components.Dataracing
@using DataRacingV1.Models;
@using Microsoft.AspNetCore.Authorization;
@using MudBlazor;
@inject CsvService CsvService;
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations

<MudForm @ref="_form" @bind-IsValid="@success">
<MudPaper Style = "margin-top: 45px; margin-bottom:60px; padding: 10px;">

        @if (!submitVehicle.Manual)
        {
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudSelect T="string" Label="Tipo" @bind-Value="SelectedTipo" For="@(() => SelectedTipo)" Required="true">
                        @foreach (var tipo in Tipos)
                        {
                            <MudSelectItem T="string" Value="@tipo">@tipo</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudSelect T="string" Label="Fabricante" @bind-Value="SelectedFabricante" For="@(() => SelectedFabricante)" Required="true" Disabled="@string.IsNullOrEmpty(SelectedTipo)">
                        @foreach (var fabricante in Fabricantes)
                        {
                            <MudSelectItem T="string" Value="@fabricante">@fabricante</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudSelect T="string" Label="Modelo" @bind-Value="SelectedModelo" For="@(() => SelectedModelo)" Required="true" Disabled="@string.IsNullOrEmpty(SelectedFabricante)">
                        @foreach (var modelo in Modelos)
                        {
                            <MudSelectItem T="string" Value="@modelo">@modelo</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudSelect T="string" Label="Variante" @bind-Value="SelectedVariante" For="@(() => SelectedVariante)" Required="true" Disabled="@string.IsNullOrEmpty(SelectedModelo)">
                        @foreach (var variante in Variantes)
                        {
                            <MudSelectItem T="string" Value="@variante">@variante</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>

            @if (!string.IsNullOrEmpty(ID))
            {
                <p>ID: @ID</p>
            }


        }
        @if (submitVehicle.Manual)
        {
            <MudTextField Label="Tipo" @bind-Value="submitVehicle.Tipo" For="@(() => submitVehicle.Tipo)" Required="true" />
            <MudTextField Label="Fabricante" @bind-Value="submitVehicle.Fabricante" For="@(() => submitVehicle.Fabricante)" Required="true" />
            <MudTextField Label="Modelo" @bind-Value="submitVehicle.Modelo" For="@(() => submitVehicle.Modelo)" Required="true" />
            <MudTextField Label="Motor" @bind-Value="submitVehicle.Variante" For="@(() => submitVehicle.Variante)" Required="true" />
            <MudTextField Label="Potencia" @bind-Value="submitVehicle.Potencia" For="@(() => submitVehicle.Potencia)" Required="true" />
        }

        @if (!submitVehicle.Manual)
        {
            <p style="margin-top:20px;">Si tu vehiculo no esta en la lista, haz click abajo</p>
        }


        <MudSwitch @bind-Value="@submitVehicle.Manual" Color="Color.Primary" Label="Seleccion Manual"></MudSwitch>
    </MudPaper>
</MudForm>


@code {

    private MudForm _form;
    private bool success;

    private string ID;

    //string ManualSelectedFabricante { get; set; }
    //string ManualSelectedModelo { get; set; }
    //string ManualSelectedVariante { get; set; }
    //string ManualSelectedPotencia { get; set; }



  



    [Parameter]
    public SubmitVehicle submitVehicle { get; set; }







    protected override void OnParametersSet()
    {
        if (submitVehicle != null)
        {
            SelectedTipo = submitVehicle.Tipo;
            SelectedFabricante = submitVehicle.Fabricante;
            SelectedModelo = submitVehicle.Modelo;
            SelectedVariante = submitVehicle.Variante;
        }
    }

    private List<string> Tipos = new();
    private List<string> Fabricantes = new();
    private List<string> Modelos = new();
    private List<string> Variantes = new();

    private List<Vehicle> Vehicles = new();

    private string _selectedTipo;
    public string SelectedTipo
    {
        get => _selectedTipo;
        set
        {
            if (_selectedTipo != value)
            {
                _selectedTipo = value;
                OnTipoChanged(value);
            }
        }
    }

    private string _selectedFabricante;
    public string SelectedFabricante
    {
        get => _selectedFabricante;
        set
        {
            if (_selectedFabricante != value)
            {
                _selectedFabricante = value;
                OnFabricanteChanged(value);
            }
        }
    }

    private string _selectedModelo;
    public string SelectedModelo
    {
        get => _selectedModelo;
        set
        {
            if (_selectedModelo != value)
            {
                _selectedModelo = value;
                OnModeloChanged(value);
            }
        }
    }

    private string _selectedVariante;
    public string SelectedVariante
    {
        get => _selectedVariante;
        set
        {
            if (_selectedVariante != value)
            {
                _selectedVariante = value;
                OnVarianteChanged(value);
            }
        }
    }



    protected override void OnInitialized()
    {
        Vehicles = CsvService.GetVehicles("Precios/lista.csv");
        Tipos = Vehicles.Select(v => v.TIPO).Distinct().ToList();
    }

    private void OnTipoChanged(string value)
    {
        SelectedFabricante = null;
        SelectedModelo = null;
        SelectedVariante = null;
        submitVehicle.Tipo = SelectedTipo;
        Fabricantes = Vehicles.Where(v => v.TIPO == value)
                              .Select(v => v.FABRICANTE)
                              .Distinct()
                              .ToList();
        Modelos.Clear();
        Variantes.Clear();
    }

    private void OnFabricanteChanged(string value)
    {
        SelectedModelo = null;
        SelectedVariante = null;
        submitVehicle.Fabricante = SelectedFabricante;
        Modelos = Vehicles.Where(v => v.FABRICANTE == value && v.TIPO == SelectedTipo)
                          .Select(v => v.MODELO)
                          .Distinct()
                          .ToList();
        Variantes.Clear();
    }

    private void OnModeloChanged(string value)
    {
        SelectedVariante = null;
        submitVehicle.Modelo = SelectedModelo;
        Variantes = Vehicles.Where(v => v.MODELO == value && v.FABRICANTE == SelectedFabricante && v.TIPO == SelectedTipo)
                            .Select(v => v.VARIANTE)
                            .Distinct()
                            .ToList();
    }

    private void OnVarianteChanged(string value)
    {
        //SelectedVehicle = Vehicles.FirstOrDefault(v => v.TIPO == SelectedTipo && v.FABRICANTE == SelectedFabricante && v.MODELO == SelectedModelo && v.VARIANTE == SelectedVariante);
        
        submitVehicle.Tipo = SelectedTipo;
        submitVehicle.Fabricante = SelectedFabricante;
        submitVehicle.Modelo = SelectedModelo;
        submitVehicle.Variante = SelectedVariante;
        submitVehicle.Potencia = 0;
        

    }


}