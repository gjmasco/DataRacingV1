@page "/tickets"
@using DataRacingV1.Components.Tickets
@inject TicketService TicketService
@inject NavigationManager NavigationManager

<h3>Tickets</h3>

<MudTable @key="tableKey" Items="@pagedTickets" Hover="true" Striped="true" TotalItems="@totalItems" ItemsPerPage="10" ServerData="@(new Func<MudBlazor.TableState, CancellationToken, Task<TableData<TicketEntity>>>(ServerReload))" MultiSelection="false">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true" @oninput="OnSearchInputChanged" @onkeydown="HandleKeyDown"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Ticket #</MudTh>
        <MudTh>Fabricante</MudTh>
        <MudTh>Modelo</MudTh>
        <MudTh>Variante</MudTh>
        <MudTh>Dominio</MudTh>
        <MudTh>Estado</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Ticket #">@context.Id</MudTd>
        <MudTd DataLabel="Fabricante">@context.VehiculoFabricante</MudTd>
        <MudTd DataLabel="Modelo">@context.VehiculoModelo</MudTd>
        <MudTd DataLabel="Variante">@context.VehiculoVariante</MudTd>
        <MudTd DataLabel="Dominio">@context.InfoDominio</MudTd>
        <MudTd DataLabel="Estado">@context.Status</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ViewTicket(context.Id))">View</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10}" />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<TicketEntity> pagedTickets = Enumerable.Empty<TicketEntity>();
    private int totalItems;
    private int page = 1;
    private string searchString = "";
    private string tableKey = Guid.NewGuid().ToString(); // Unique key for MudTable

    private MudBlazor.TableState _tableState = new MudBlazor.TableState { Page = 0, PageSize = 10 };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task<TableData<TicketEntity>> ServerReload(MudBlazor.TableState args, CancellationToken cancellationToken)
    {
        _tableState = args;
        page = args.Page + 1;
        await LoadData();
        return new TableData<TicketEntity>() { TotalItems = totalItems, Items = pagedTickets };
    }

    private async Task LoadData()
    {
        var allTickets = await TicketService.SearchTicketsAsync(searchString);

        totalItems = allTickets.Count;
        pagedTickets = allTickets.Skip((page - 1) * 10).Take(10).ToList();
    }

    private void ViewTicket(int ticketId)
    {
        NavigationManager.NavigateTo($"/ticket/{ticketId}");
    }

    private void OnSearchInputChanged(ChangeEventArgs e)
    {
        searchString = e.Value.ToString();
        page = 1;
        tableKey = Guid.NewGuid().ToString(); // Change the key to force re-render
        LoadData();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSearchInputChanged(new ChangeEventArgs { Value = searchString });
        }
    }
}